# Make the cmsRun config file to be used with CRAB submission

# Note: the number of entries is left as a command line arg,
# and should be provided by the CRAB submission script.
# The input file is set to a dummy value,
# as it is automatically provided by the CRAB machinery.

import os
import sys
import argparse

thisdir = os.path.dirname(os.path.abspath(__file__))
topdir = os.path.abspath(os.path.join(thisdir, '../'))
sys.path.append(topdir)

from run.cmsdriver.cmsdriver import make_nano_cmsdriver
from run.globaltags.globaltag import get_globaltag


def make_cmsrun_config(config_file, **kwargs):

    # set dummy arguments
    inputfiletag = 'dummyfile' # automatically provided by CRAB
    nentriestag = '-9999' # replaced with command line arg further down
    configname_temp = 'temp' # moved to provided config_file further down

    # set output file name
    outputfiletag = 'nanoaod.root'

    # make and run the cmsDriver command
    cmd = make_nano_cmsdriver(inputfiletag,
            configname=configname_temp,
            nentries=nentriestag, outputfile=outputfiletag,
            no_exec=True, **kwargs)
    os.system(cmd)
    tempfile = f'{configname_temp}_NANO.py'

    # define argument parser template
    argparser = "import os\n"
    argparser += "import sys\n\n"
    argparser += "# Command line argument parser\n"
    argparser += "# generated by make_cmsrun_config.py\n"
    argparser += "entries = -1\n"
    argparser += "for arg in sys.argv[2:]:\n"
    argparser += "    key, val = arg.split('=')\n"
    argparser += "    if key == 'entries': entries = int(val)\n"
    argparser += "    else: raise Exception(f'Unrecognized argument: {arg}')\n"
    argparser += "print(f'cmsRun {os.path.basename(__file__)}: found following command line args:')\n"
    argparser += "print(f'  - entries: {entries}')\n\n"

    # replace tags with arguments
    with open(tempfile, 'r') as f:
        lines = f.readlines()
    lines = [argparser] + lines
    for lineidx, line in enumerate(lines):
        line = line.replace(nentriestag, 'entries')
        lines[lineidx] = line
    with open(config_file, 'w') as f:
        for line in lines: f.write(line)
    os.system(f'rm {tempfile}')
    print(f'Created cmsRun config file {config_file}.')
    return config_file


if __name__=='__main__':

    # read command line arguments
    parser = argparse.ArgumentParser()
    parser.add_argument('--dtype', default=None)
    parser.add_argument('--era', default=None)
    parser.add_argument('--globaltag', default=None)
    parser.add_argument('--year', default=None)
    args = parser.parse_args()

    # parse global tag
    if args.globaltag is not None and args.globaltag.endswith('.json'):
        if args.year is None:
            msg = 'Passing a json file for the global tag requires specifying the year.'
            raise Exception(msg)
        globaltag = get_globaltag(args.globaltag, args.year)
    else: globaltag = args.globaltag
    print(f'Using global tag: {globaltag}')

    # make cmsRun config for CRAB
    make_cmsrun_config('cmsrun_config.py',
            conditions=globaltag, era=args.era, dtype=args.dtype)
